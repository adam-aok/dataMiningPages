main();

//basic declaration of 
function main(){
    app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;
    //app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;
    if(app.documents.length != 0){
		if (app.activeDocument.stories.length != 0){
              myFolder = ("C:/Users/a.keefe/Desktop")
              expFormat = ".txt"          
              myExportPages(expFormat, myFolder)
              $.gc()
		}
    
		else{
			alert("The document does not contain any text. Please open a document containing text and try again.");
		}
	}
	else{
		alert("No documents are open. Please open a document and try again.");
	}
}

function myExportPages(myExportFormat, myFolder){
    
    var curDate = new Date();
    myFileName = "ak.DataMine_" + curDate.toDateString()+ myExportFormat;
    myFilePath = myFolder + "/" + myFileName;
    var myFile = new File(myFilePath);
    
//resolves the lack of indexOf function   
if (typeof Array.prototype.indexOf != "function") {  
    Array.prototype.indexOf = function (el) {  
        for(var i = 0; i < this.length; i++) if(el === this[i]) return i;  
        return -1;  
        }  
}                  
    //var basicMasters = ["A-Master","B.1-Project Team (Headshots)","B.2-Project Team (Group Photo)","B.3-Project Details","C.1-P
      
    var pageRow = [];
    
    //fill row with null values at first
    for(pR = 0; pR < 10 ; pR++){
        pageRow[pR] = ("\"" + "\"");
        }
            
    //input filepath into pageRow
    
    
    //q4 2019 locations array
    var locArr1 = [1.638,2.3902,3.1502,3.8978,4.651,5.4052,6.1586,8.0872]
    //option 2 locations array
    var locArr2 = [1.638,2.2874,2.9445,3.5894,4.2398,4.8912,5.5442,6.2071]
    //option 3 locations array
    var locArr3 = [1.635,2.2744,2.9215,3.5564,4.1968,4.8382,5.4793,5.5951]
    
    
   
       
    var titlesIndex = [];
    var fileArr = ["\"" + "\"","\"" + "\"","\"" + "\""]
    //for(myCounter = 0; myCounter < app.activeDocument.pages.length; myCounter++)
    var posList = [];
    
    docCheck = 2;
    mSpread = app.activeDocument.masterSpreads.item(0);
    
    for(a=0;a<mSpread.textFrames.length;a++){
        if (mSpread.textFrames.item(a).parentStory.contents == "DESIGN ON THE BOARDS      Q-4 2019") docCheck = 1;
        if (mSpread.textFrames.item(a).parentStory.contents == "DESIGN ON THE BOARDS      Q-4 2017") docCheck = 3;
        }
        if (docCheck == 1) posList = locArr1;
        else if (docCheck == 3) posList = locArr3;
        else posList = locArr2;
        //alert(posList);
        
    var projIndex = [[]];
    projIndex.pop()
    
    //alert(File(app.activeDocument.fullName).modified);
    fileArr[0] = csvQuotes(app.activeDocument.fullName);
    fileArr[1] = csvQuotes(File(app.activeDocument.fullName).modified);
         
        
    //iterating through spreads of document (spreads is chosen instead of pages to accommodate spreads containing common information. open to modification to spreads)
    for(myCounter = 0; myCounter < app.activeDocument.pages.length; myCounter++){
         
         //get current page
         myPage = app.activeDocument.pages.item(myCounter);
         
        
        if (myPage.appliedMaster !== null)        masterCheck = myPage.appliedMaster;
        else var masterCheck = app.activeDocument.masterSpreads.item(0);
            //alert(masterCheck.name); 
        
//~          for (c = 0;c<masterCheck.textFrames.length;c++){
//~              if approx(masterCheck.textFrames.item(x).geometricBounds[0],.609) == true && masterCheck.textFrames.item(x).parentStory.contents.toUpperCase() !== "PROJECT NAME"&& masterCheck.textFrames.item(x).parentStory.contents.toUpperCase() !== "CONFIDENTIAL PROJECT NAME") 
//~                 myPage.textFrames = masterCheck.textFrames
//~                 }
//~             }

         modify = false;
         pageRow = [];
         for(pR = 0; pR < 10 ; pR++) pageRow[pR] = ("\"" + "\"");
         margin = 0;
         
         pageCheck = csvQuotes(csvFriendly(myPage.textFrames));
         
                  
         for(z=0;z<myPage.textFrames.length;z++){
             //alert(csvQuotes(csvFriendly(myPage.textFrames.item(z).parentStory.contents.toUpperCase())) + titlesIndex[titlesIndex.length-1])
                if (myPage.textFrames.item(z).parentStory.contents == "Location" && myPage.textFrames.item(z).geometricBounds[0] !== 1.44) margin = myPage.textFrames.item(z).geometricBounds[0] - 1.44;
                if (titlesIndex.length !== 0 && csvQuotes(csvFriendly(myPage.textFrames.item(z).parentStory.contents.toUpperCase())) == titlesIndex[titlesIndex.length-1]){                
                    //alert(csvQuotes(csvFriendly(myPage.textFrames.item(z).parentStory.contents.toUpperCase())) + titlesIndex[titlesIndex.length-1])
                    pageRow = projIndex[projIndex.length-1];
                    //alert(pageRow);
                    modify = true;
                }
            }

         if (masterCheck.name == "D-Divider"){
                       for(x = 0; x < masterCheck.textFrames.length;x++){
                           if (masterCheck.textFrames.item(x).isValid == true){
                                 if (approx(masterCheck.textFrames.item(x).geometricBounds[1],13.8646) == true && masterCheck.textFrames.item(x).parentStory.contents !== "Office Location"){
                                     //alert(masterCheck.textFrames.item(x).parentStory.contents);
                                 fileArr[2] = csvQuotes(csvFriendly(masterCheck.textFrames.item(x).parentStory.contents.toUpperCase()));
                                 }
                             }
                         }
                     }
                 
        largest = ""
                        
         for(myCount = 0; myCount < myPage.textFrames.length; myCount++){
                 
                 //largest = "";
                 //get textFrame on page
                 myTextFrame = myPage.textFrames.item(myCount);
                                                   
                 myStory = myTextFrame.parentStory;                          
                 myStoryText = csvFriendly(myStory.contents);
                 var myStoryStyle = "undefined";
                 
                 //get paragraph style for that text box
                 if (myStory.paragraphs.firstItem().isValid == true){
                 myStoryStyle = myStory.paragraphs.firstItem().appliedParagraphStyle.name;
                 }       
                 
                 //get geometric bounds of this text frame
                 myPosition = myTextFrame.geometricBounds;
                  
                 //get office
                if (approx(myPosition[1],13.8646) == true){
                           fileArr[2] = csvQuotes(myStoryText.toUpperCase());
                           //alert(masterCheck.textFrames.item(x).parentStory.contents);
                           }
                     
                     
                 //assign pagetitle slot to this row
                 if (approx(myPosition[0],.609) == true){
                             
                             pageTitle = csvQuotes(myStoryText.toUpperCase());
                             //alert(pageTitle);
                             if (titlesIndex.indexOf(pageTitle) == -1){
                                titlesIndex.push(pageTitle)
                                //alert(titlesIndex.length);
                                //pageRow = [];                     
                                //for(pR = 0; pR < 10 ; pR++) pageRow[pR] = ("\"" + "\"");
                                }
                                //alert(titlesIndex)
                                pageRow[0] = pageTitle;
                             }
                 //if (masterCheck.name == "B.1-Project Team (Headshots)" || masterCheck.name == "B.2-Project Team (Group Photo)"){
                //}

                 
                 //if (masterCheck.name == "B.3-Project Details"){
                                      
                     if (approx(myPosition[0],posList[0]+margin) == true){
                        //alert(myStoryText);
                        pageRow[2] = csvQuotes(myStoryText);
                        //alert("location should be" + pageRow[2]);
                        //projLoc = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[1]+margin) == true){
                        pageRow[3] = csvQuotes(myStoryText);                    
                        projPA = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[2]+margin) == true){
                        pageRow[4] = csvQuotes(myStoryText);                    
                        projCT = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[3]+margin) == true){
                        pageRow[5] = csvQuotes(myStoryText);
                        projSize = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[4]+margin) == true){
                        pageRow[6] = csvQuotes(myStoryText);
                        //alert(masterCheck.name);
                        projCost = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[5]+margin) == true){
                        pageRow[7] = csvQuotes(myStoryText);
                        //alert(masterCheck.name);
                        projCD = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[6]+margin) == true){
                        pageRow[1] = csvQuotes(myStoryText);
                        //alert(masterCheck.name);
                        projNum = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[7]+margin) == true){
                        pageRow[8] = csvQuotes(myStoryText);
                        //projSustain = csvQuotes(myStoryText);
                        }
                    if (approx(myPosition[0],posList[7]) == true && approx(myPosition[1],1.681) == true){
                        pageRow[8] = csvQuotes(myStoryText);
                        //projSustain = csvQuotes(myStoryText);
                        }
                     if ((myPosition[2] - myPosition[0]) > 2 && myStoryText.length > 100 && myStoryText.length > largest.length ){
                         //alert(myStoryText);
                         largest = myStoryText;
                         //alert(myPosition[2] - myPosition[0]);
                        pageRow[9] = csvQuotes(myStoryText);
                        //alert(pageRow.toString());
                        //projDescription = csvQuotes(myStoryText);
                        }
                     if (myStoryText.length > 40 && approx(myPosition[1],0.3686) == true && (myPosition[2] - myPosition[0]) < 1.5 && myStoryStyle == "Body Text"){
                        pageRow[10] = csvQuotes(myStoryText);
                        //alert(myStoryText);
                        //projDescription = csvQuotes(myStoryText);
                        }
                   //}
               }
           
    //alert(pageRow);
    //rerun for the masterSpread      
    
      if (pageRow[0] == "\"" + "\""){
        for(n = 0; n < masterCheck.textFrames.length;n++){
            if (approx(masterCheck.textFrames.item(n).geometricBounds[0],0.6097) == true && masterCheck.textFrames.item(n).parentStory.contents.toUpperCase() !== "CONFIDENTIAL PROJECT NAME" && masterCheck.textFrames.item(n).parentStory.contents.toUpperCase() !== "CONFIDENTIAL PROJECT NAME"){
                for(myCount = 0; myCount < myPage.textFrames.length; myCount++){
                     myTextFrame = myPage.textFrames.item(myCount);
                     myPosition = myTextFrame.geometricBounds;
                     myStory = myTextFrame.parentStory;                          
                     myStoryText = csvFriendly(myStory.contents);
                     var myStoryStyle = "undefined";
                     if (myStory.paragraphs.firstItem().isValid == true) myStoryStyle = myStory.paragraphs.firstItem().appliedParagraphStyle.name;       
                     
                     if (approx(myPosition[0],.609) == true){
                         pageTitle = csvQuotes(myStoryText.toUpperCase());
                         //if (titlesIndex.indexOf(pageTitle) == -1) titlesIndex.push(pageTitle);
                         pageRow[0] = pageTitle;
                         }
                     
                     if ((myStoryStyle == "Body Text" || myStoryStyle == "Body Text with Bullets") && myStoryText !== "Type your Body Text here"){
                        if (approx(myPosition[0],posList[0]+margin) == true) pageRow[2] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[1]+margin) == true) pageRow[3] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[2]+margin) == true) pageRow[4] = csvQuotes(myStoryText); 
                        if (approx(myPosition[0],posList[3]+margin) == true) pageRow[5] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[4]+margin) == true) pageRow[6] = csvQuotes(myStoryText);                        
                        if (approx(myPosition[0],posList[5]+margin) == true) pageRow[7] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[6]+margin) == true) pageRow[1] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[7]+margin) == true) pageRow[8] = csvQuotes(myStoryText);
                        if (approx(myPosition[0],posList[7]) == true && approx(myPosition[1],1.681) == true) pageRow[8] = csvQuotes(myStoryText);
                        if ((myPosition[2] - myPosition[0]) > 2 && myStoryText.length > 100 && myStoryText.length > largest.length ){
                            largest = myStoryText;
                            pageRow[9] = csvQuotes(myStoryText);
                            }
                         if (myStoryText.length > 50 && approx(myPosition[1],0.3686) == true && (myPosition[2] - myPosition[0]) < 1.5 && myStoryStyle == "Body Text") pageRow[10] = csvQuotes(myStoryText);
                   }
               }
           }
       }
   }
            
                    
    //alert(pageRow);
    if (modify == true){
        projIndex[projIndex.length-1] = pageRow;
        //alert("modified " + pageRow[2]);
        }
    if (pageRow[0] !== "\""+ "\"" && projIndex[projIndex.length-1] !== pageRow && modify == false){
        //alert(titlesIndex);
        //alert(pageRow);
        //alert("new project: " + pageRow);
        projIndex.push(pageRow);
        }
    
    
    
            
//~     if (titlesIndex.indexOf(pageRow[0]) == -1){
//~                      if (pageRow[0] !== "\"" + "\"" && projIndex.indexOf(pageRow) == -1){
//~                          projIndex.push(pageRow);
//~                          alert(pageRow);
//~                          }    
//~                      }
    
}
//link adding functions seems to have created an issue
//var linkArr = [];

//parses for link list
//for(myCounter = 0; myCounter < app.activeDocument.links.length; myCounter++){
   // eachLink = app.activeDocument.links.item(myCounter).filePath;
    //if (linkArr.indexOf("\"" + eachLink + "\"") == -1){
    //    linkArr.push("\"" + eachLink + "\"")
    //}
    
    for (j = 0; j< projIndex.length;j++){
        //alert(projIndex[j].toString())
        myPageText = fileArr.toString() +"\," + projIndex[j].toString() + "\n";
        //alert(myPageText);
        writeFile(myFile,myPageText);
        }
       
   // if (pageRow[0] !=="\"" + "\"")    writeFile(myFile, myPageText);
}

    
      


//test 

function writeFile(fileObj, fileContent, encoding) {  
    encoding = encoding || "UTF-8";  
    fileObj = (fileObj instanceof File) ? fileObj : new File(fileObj);  
  
  
    var parentFolder = fileObj.parent;  
    if (!parentFolder.exists && !parentFolder.create())  
        throw new Error("Cannot create file in path " + fileObj.fsName);  
  
  
    fileObj.encoding = encoding;  
    fileObj.open("a");  
    fileObj.write(fileContent);  
    fileObj.close();  
  
  
    return fileObj;  
}  

function parseSidebar(myStory,Start,Finish){
    var sizeArr = [""];
    refString = csvFriendly(myStory.contents);
    var refArr = refString.split("</P><P>");
    sizeReturn = "";
    
    //loads paragraphs into string reference array
//~     for(myCounter = 0; myCounter < myStory.paragraphs.length ; myCounter++){
//~         sbLine = myStory.paragraphs.item(myCounter).contents.replace(/(\r\n|\n|\r)/gm,"").replace("\,","#%");
//~         refArr.push(sbLine);
//~         }
//~     
    //loads sizeArr with relevant data after size line
    sizeArr = refArr.slice(refArr.indexOf(Start)+1, refArr.indexOf(Finish));


    sizeReturn = "\"" + sizeArr.toString().replace(/,/g,";")     + "\"";
//.replace("\,",";")    
    return sizeReturn;
    }


//convert text into compatible csv format--REPLACE </P><P> WITH PARAGRAPH BREAK AND #% WITH COMMA
function csvFriendly(myText){
    myText = trim(myText.toString().replace(/(\r\n|\n|\r)/gm,"</P><P>").replace("\,","#%"));
    //myText = myText.replace(/(\r\n|\n|\r)/gm,"</P><P>").replace(/,/g,"#%");
    return myText;
 }
 
function approx(number,reference,delta){
    //if delta <> undefined;
    var delta = .02;
    if (Math.abs((number - reference)) <= delta || Math.abs((reference - number)) <= delta){
    return true
    }
    else return false
    }

function csvQuotes(myText){
    myText = ("\"" + trim(myText) + "\"");
    return myText
}

function trim(str) {
    return str.toString().replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}

function logMe(input){
     var now = new Date();
     var output = now.toTimeString() + ": " + input;
     $.writeln(output);
     var logFile = File("/path/to/logfile.txt");
     logFile.open("e");
     logFile.writeln(output);
     logFile.close();
}
